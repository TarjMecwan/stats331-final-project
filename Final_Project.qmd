---
title: "Exploring Relationships Between Extreme Poverty Rates and Inflation Rates in the World"
author: "Tarj Mecwan, Bernice Lau, Rachel Hartfelder, Haley Tran"
format: 
  html:
    embed-resources: true
    code-tools: true
    code-fold: true
    toc: true
editor: source
execute: 
  error: true
  echo: true
  message: false
  warning: false
---

## Introduction

In this analysis, we will explore the relationships between extreme poverty rates and inflation rates around the world. We will be using the `Extreme Poverty Rate, less than $2.15/day` and `Inflation, annual %` data sets, downloaded as `poverty.csv` and `inflation.csv` respectively, from [Gapminder](https://www.gapminder.org/data/).

```{r}
#| message: false

library(tidyverse)
library(knitr)
library(viridis)
```

## The Data

To start, we will read in our datasets!

```{r}
#| message: false

poverty <- read_csv("data/poverty.csv")
inflation <- read_csv("data/inflation.csv")
```

Let's examine the `poverty.csv` dataset.

```{r}
head(poverty) |> 
  kable()
```

Here's what the `inflation.csv` dataset looks like.

```{r}
head(inflation) |> 
  kable()
```

The poverty dataset contains information on the extreme poverty rate, where workers make less than \$2.15/day, for countries over time. Each country represents one observation and each column represents one year. The inflation dataset contains information on the inflation rate for countries over time. Similar to the poverty dataset, each country represents one observation and each column represents one year. The poverty dataset contains information on the years 1800 to 2100, while the inflation dataset only contains information on the years 1961 to 2023. Both datasets contain numerous NA values.

## Data Cleaning Process

Data cleaning is a crucial step in ensuring that our analysis is based on accurate and meaningful data. Since the datasets from Gapminder contain economic indicators recorded across multiple years for different countries, we followed a structured cleaning process to prepare our data for analysis. Below, we outline the key steps and the rationale behind each decision.

#### 1. Filtering Overlapping Years

The original datasets contained economic data spanning different time periods, with some variables recorded in years that were not present in the other dataset. To maintain consistency, we filtered both datasets to include only the overlapping years, 1961 to 2023. This step ensures that we are analyzing the relationship between extreme poverty rates and inflation rates over a common time period without introducing missing values due to mismatched years.

```{r}
# Filter the datasets to include only the overlapping years (1961 to 2023)
inflation_filtered <- inflation |>
  select(country, `1961`:`2023`)

poverty_filtered <- poverty |>
  select(country, `1961`:`2023`)

```

#### 2. Reshaping the Data: Pivoting Longer

The datasets were structured in a wide format, where each year was a separate column. For ease of analysis and visualization, we transformed them into a long format by pivoting the year columns into a single `year` variable. This conversion was necessary to perform operations like merging datasets and running regression models. We also ensured that the `year` column was treated as a numeric variable rather than a character string, enabling proper chronological analysis.

```{r}
# Pivot the year columns to a single column in both datasets
inflation_long <- inflation_filtered |>
  pivot_longer(cols = `1961`:`2023`, 
               names_to = "year", 
               values_to = "inflation_rate") |>
  mutate(year = as.numeric(year))

poverty_long <- poverty_filtered |>
  pivot_longer(cols = `1961`:`2023`, 
               names_to = "year", 
               values_to = "poverty_rate") |>
  mutate(year = as.numeric(year))

```

#### 3. Merging the Datasets

Once the datasets were in long format, we merged them on the common columns: `country` and `year`. Given that some countries may have missing data for either variable, we opted for an inner join, which ensures that each `country-year` pair has both inflation and poverty data available. This decision helps maintain data integrity and prevents bias introduced by missing observations.

```{r}
# Join the datasets on country and year
poverty_inflation_data <- inflation_long |>
  inner_join(poverty_long, by = c("country", "year"))

```

#### 4. Handling Missing Values

Economic data often contains missing values due to inconsistencies in reporting across countries and time periods. To address this, we dropped rows with missing values after merging the datasets. While other imputation techniques (such as mean or median substitution) could have been used, we opted for deletion to maintain the accuracy of our statistical analysis and avoid introducing artificial trends.

```{r}
# Handle missing values
poverty_inflation_data <- poverty_inflation_data |>
  drop_na()

```

#### 5. Handling Variable Type Conversions

During our final data set verification, we discovered that the `inflation_rate` variable was incorrectly classified as a character type rather than numeric. This was due to formatting inconsistencies from the original data set, such as:

-   The use of non-standard minus signs
-   Some values being recorded with a "k" suffix (indicating thousands)

To correct this, we:

1.  Replaced non-standard minus signs with the standard minus sign

2.  Converted "k" suffix values by multiplying them by 1000

3.  Ensured all values were stored as numeric to allow for proper analysis

```{r}
#| warning: false
#| message: false

# Replace non-standard minus signs with the standard minus sign
poverty_inflation_data <- poverty_inflation_data |>
  mutate(inflation_rate = gsub("\u2212", "-", inflation_rate)) 

# Handle 'k' suffix for thousands and convert to numeric
poverty_inflation_data <- poverty_inflation_data |>
  mutate(inflation_rate = ifelse(
    grepl("k", inflation_rate, ignore.case = TRUE),
    as.numeric(gsub("k", "", inflation_rate, ignore.case = TRUE)) * 1000,
    as.numeric(inflation_rate)))
```

#### 6. Final Dataset Verification

After completing these steps, we inspected the cleaned dataset to confirm that:

-   All countries and years were correctly aligned

-   No extraneous variables remained

-   The dataset was free of missing values

```{r}
head(poverty_inflation_data) |>
  kable()
```

Now, we can save the cleaned dataset into a CSV!

```{r}
# Save the cleaned data frame to a CSV
write_csv(poverty_inflation_data, "data/poverty_inflation_data.csv")
```

The joined dataset contains 10,163 observations and 4 variables: `country` of type character, `year` of type numeric, `inflation_rate` of type numeric, and `poverty_rate` of type numeric. Each `country-year` pair represents one observation. The dataset contains the annual inflation and extreme poverty rates for each country from 1961 to 2023.

## Hypothesis

We hypothesize that there will be a nonlinear relationship between inflation rates and poverty rates in the world. Intuitively, frequent fluctuations in inflation rates will be associated with higher poverty rates, as economic instability disproportionately affects people of lower incomes. Additionally, we hypothesize there will be regional or country-specific patterns because economic structures, government policies, and external factors such as tariffs and diplomatic conflict will effect the relationship between inflation and poverty differs across global regions.

## Linear Regression

#### Data Visualization

Inflation rates can vary widely, with some countries experiencing very low rates and others experiencing extremely high rates. When we initially plotted the graph directly using the data from the joined data set, the distribution was strongly right-skewed, with most of the points located along the y-axis. As a result, we applied a log transformation to the `inflation_rate` variable to spread out the values more evenly. By applying a log transformation, we compress the range of inflation rates, making it easier to visualize and interpret the relationship between inflation rate and poverty rate.

The scatterplot below shows the relationship between the log-transformed inflation rate and the poverty rate, where each point represents an observation of inflation rate and poverty rate for a country in a year within 1961 to 2023.

```{r}
#| warning: false
#| fig-align: center
#| fig-cap: "Relationship between log-transformed inflation rate and extreme poverty rate from 1961 to 2023."

# Scatter plot of inflation rate vs. poverty rate
ggplot(data = poverty_inflation_data, 
       mapping = aes(x = log1p(inflation_rate), 
                     y = poverty_rate)) +
  geom_point(alpha = 0.5, color = "steelblue") +
  labs(
    title = "Inflation Rate vs. Poverty Rate",
    subtitle = "Poverty Rate (%)",
    x = "Log(Inflation Rate + 1)",
    y = "") +
  theme_minimal()
```

The scatter plot of the log-transformed inflation rate versus the poverty rate reveals a concentration of data points around x = 2 on the log-transformed scale. This indicates that many countries have an inflation rate that, when transformed using `log1p`, falls around this value. Specifically, `log1p(7)` is approximately 2, suggesting that a significant number of countries have an inflation rate close to 7%. This implies that moderate inflation rates (around 7%) are common across the dataset. The normally distributed spread of points shows that, even with similar inflation rates, countries can experience a wide range of poverty rates, highlighting the complexity of the relationship between these two variables.

Let's explore how the relationship between inflation rate and poverty rate changes over time. The scatterplot below illustrates the change in relationship between log-transformed average global inflation rate and average global poverty rate from 1961 to 2023, where each point represents the log-transformed average global inflation rate and average global poverty rate for a specific year. As in the graph above, we applied a log transformation to the `inflation_rate` variable to spread out the values for clearer visualization.

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| fig-cap: "Change in relationship between log-transformed average global inflation rate and average global poverty rate from 1961 to 2023."

# Aggregate data to show average values per year
aggregated_data <- poverty_inflation_data |>
  group_by(year) |>
  summarize(avg_inflation_rate = mean(inflation_rate, na.rm = TRUE),
            avg_poverty_rate = mean(poverty_rate, na.rm = TRUE))

# Plot of average inflation rate vs. average poverty rate over time
ggplot(data = aggregated_data, 
       mapping = aes(x = log1p(avg_inflation_rate), 
                     y = avg_poverty_rate, 
                     color = year)) +
  geom_point(alpha = 0.7, size = 3) +
  geom_text(aes(label = year), 
            hjust = 1.5, 
            vjust = 1.5, 
            size = 3, 
            check_overlap = TRUE) +
  scale_color_viridis_c() +
  labs(
    title = "Average Inflation Rate vs. Average Poverty Rate Over Time",
    subtitle = "Average Poverty Rate (%)",
    x = "Log(Average Inflation Rate + 1)",
    y = "",
    color = "Year") +
  theme_minimal()
```

From this graph, we can make the following observations:

-   1961-1980 is characterized by low to moderate average global inflation rates, accompanied by high average global poverty rates. This suggests that despite relatively stable inflation, poverty remained a significant issue globally.

-   1980-2000 had moderate to high average global inflation rates, while average global poverty rates decreased to moderate levels. This indicates a period of economic volatility with higher inflation, with some progress in reducing poverty.

-   2000-2023 shows low to moderate levels of average global inflation, with average global poverty rates further decreasing to low to moderate levels. This suggests improved economic stability and continued progress in poverty reduction.

## 2.2 Linear Regression Model

To analyze the relationship between **inflation rate** and **extreme poverty rate**, we applied a **simple linear regression model**. Since inflation rates are highly skewed, we used a **log transformation** (`log1p(inflation_rate)`) to make the relationship more linear.

The regression equation is:

$$
\hat{Y} = \beta_0 + \beta_1 \cdot \log(1 + X) + \epsilon
$$

where:

\- $\hat{Y}$ = Predicted poverty rate

\- $X$ = Inflation rate

\- $\beta_0$ = Intercept (poverty rate when inflation is very low)

\- $\beta_1$ = Slope (expected change in poverty rate for a one-unit increase in log-transformed inflation)

\- $\epsilon$ = Error term

```{r}
# Removing NA values to prevent errors
clean_data <- poverty_inflation_data |>
  filter(!is.na(inflation_rate) & !is.na(poverty_rate)) |>
  filter(is.finite(log1p(inflation_rate)))

# Fit linear regression model
linear_model <- lm(poverty_rate ~ log1p(inflation_rate), data = clean_data)

# Display regression summary
summary(linear_model)

# Extract regression coefficients and R² value
intercept <- coef(linear_model)[1]   # β0 (Intercept)
slope <- coef(linear_model)[2]       # β1 (Slope for log-transformed inflation rate)
r_squared <- summary(linear_model)$r.squared

# Print results
cat("Intercept (β0):", intercept, "\n")
cat("Slope (β1):", slope, "\n")
cat("R-squared:", r_squared, "\n")

# Visualizing the Regression Line
ggplot(data = clean_data, 
       aes(x = log1p(inflation_rate), y = poverty_rate)) +
  geom_point(alpha = 0.5, color = "steelblue") +
  geom_smooth(method = "lm", color = "red", se = FALSE) +
  labs(
    title = "Linear Regression: Log(Inflation Rate) vs. Poverty Rate",
    x = "Log(Inflation Rate + 1)",
    y = "Poverty Rate (%)"
  ) +
  theme_minimal()

```

#### Evaluating Model Fit

**TODO: Haley**
